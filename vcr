#!/usr/bin/python3
import curses
import vcr_ssh
from vcr_ssh import *
import re
import subprocess
from menu import *

vcr_hostuser = "vm" 
vcr_hostname = "tc-eden"
vcr_hostport = 22

def main(screen):
	list_vms(screen)
	
def eprint(screen,text):
	screen.addstr(1, 1, text, curses.A_NORMAL)

def list_vms(screen):

	# SSH
	session = open_session(vcr_hostuser, vcr_hostname, vcr_hostport)
	vmstr = remote_cmd(session, "vboxmanage list vms")

	# Remove blank lines, quotes, and UUIDs
	vmlist = re.sub(r'(^\n|"| ?{[0-9a-z\-]*})', "", vmstr).split("\n")

	# Get ports
	portlist = []
	for vm in vmlist:
		port = get_port(session,vm)
		if port != None:
			portlist.append("ON - RDP: " + port)
		else:
			portlist.append("OFF")

	# Set padding to two character after the longest vm-name
	padding = len(max(vmlist, key=len)) + 1

	# Create a menu of VMs
	vmenu = Menu(screen, "Choose a VM")
	vmenu.set_noback(True)
	for vm,port in zip(vmlist,portlist):
		if vm != "":
			vmenu.add_item(MenuItem(vm.ljust(padding) + port, (manage_vm, screen, session, vm)))

	vmenu.add_item(MenuItem("Quit", vmenu.close))

	screen.clear()
	#vmenu.refresh(5)
	vmenu.draw(2,4)

def get_port(session, vmname):
	vminfo = remote_cmd(session, "vboxmanage showvminfo " + vmname)
	for line in vminfo.split("\n"):
		if "VRDE port:" in line:
			return re.sub(r'\D', "",line)
	return None

def manage_vm(screen, session, vmname):

	port = str(get_port(session, vmname))

	if r_headless() == True:
		if port == "None":
			start_vm_text = "Start VM"
		else:
			start_vm_text = "RDP Port: " + port

	else:
		start_vm_text = "RDesktop"
		if port == "None":
			start_vm_text += " & Start VM"
	
	cmenu = Menu(screen, "Managing: " + vmname + " | RDP: " + port)

	start_vm_item = MenuItem(start_vm_text,    (startvm_rdp, screen,  session, cmenu, vmname, port))
	cmenu.add_item(start_vm_item)
	cmenu.add_item(MenuItem("Turn On / Off",   (power_menu,  screen,  session, vmname)))
	cmenu.add_item(MenuItem("Snapshot",        (eprint,      screen,  "FEATURE NOT YET IMPLEMENTED")))
	cmenu.add_item(MenuItem("Manage rdesktop", (eprint,      screen,  "FEATURE NOT YET IMPLEMENTED")))
	cmenu.add_item(MenuItem("VM information",  (eprint,      screen,  "FEATURE NOT YET IMPLEMENTED")))
	cmenu.add_item(MenuItem("Back",            cmenu.close))
	screen.clear()
	cmenu.draw(2, 4)

def startvm_rdp(screen, session, menu, vmname, port):
	# Make sure it's off, to supress errors.
	if get_port(session, vmname) == None:
		remote_cmd(session, "vboxmanage startvm " + vmname + " --type headless& > /dev/null 2>&1")
		port = get_port(session, vmname)

	# Check for active X11 Environment
	if r_headless() == False:
		cmd = "rdesktop -K " + vcr_hostname + ":" + port + " > /dev/null 2>&1"
		process = subprocess.Popen(cmd, stdout=None, stderr=None, shell=True)

	menu.close()
	manage_vm(screen, session, vmname)
	

# Return True if vcr is being run remotely
def r_headless():
	return (os.environ.get('DISPLAY') == None)

def power_menu(screen, session, vmname):

	turnon   = "vboxmanage startvm "   + vmname + " --type headless& > /dev/null 2>&1"
	acpioff  = "vboxmanage controlvm " + vmname + " acpipowerbutton& > /dev/null 2>&1"
	forceoff = "vboxmanage controlvm " + vmname + " poweroff& > /dev/null 2>&1"
	reset    = "vboxmanage controlvm " + vmname + " reset& > /dev/null 2>&1"

	pmenu = Menu(screen, "Power Options for: " + vmname)
	pmenu.add_item(MenuItem("Turn On",          (remote_cmd, session, turnon)))
	pmenu.add_item(MenuItem("Turn Off (ACPI)",  (remote_cmd, session, acpioff)))
	pmenu.add_item(MenuItem("Turn Off (Force)", (remote_cmd, session, forceoff)))
	pmenu.add_item(MenuItem("Reset (Force)",    (remote_cmd, session, reset)))
	pmenu.add_item(MenuItem("Back",             pmenu.close))
	screen.clear()
	pmenu.draw(2, 4)

if __name__ == '__main__':
	curses.wrapper(main)
