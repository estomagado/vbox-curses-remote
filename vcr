#!/usr/bin/python3
import curses
import os
import re
import subprocess
from menu import *

vcr_hostuser = "root" 
vcr_hostname = "192.168.8.10"
vcr_hostport = 22

def main(screen):
	list_vms(screen)
	
def eprint(screen,text):
	screen.addstr(1, 1, text, curses.A_NORMAL)

def remote_cmd(cmd):
	return subprocess.check_output("ssh -t -q " + vcr_hostuser + "@" + vcr_hostname + " " + cmd + "; exit 0", shell=True).decode("utf-8")

def list_vms(screen):

	# SSH
	vmstr = remote_cmd("VBoxManage list vms")

	# Remove blank lines, quotes, and UUIDs
	vmlist = re.sub(r'(^\n|"| ?{[0-9a-z\-]*})', "", vmstr).split("\n")
	if vmlist[len(vmlist)-1] == "":
		vmlist.pop()

	# Set padding to two character after the longest vm-name
	padding = len(max(vmlist, key=len)) + 1

	# Create a menu of VMs
	vmenu = Menu(screen, "Choose a VM")
	vmenu.set_noback(True)
	
	for vm in vmlist:
		vmenu.add_item(MenuItem((get_vm_status, vm, padding), (manage_vm, screen, vm)))

	vmenu.add_item(MenuItem("Quit", vmenu.close))

	screen.clear()
	vmenu.draw(2,4)

def get_vm_status(vmname, padding):
	port = get_port(vmname)
	if port != None:
		return vmname.ljust(padding) + "ON - RDP: " + port
	return vmname.ljust(padding) + "OFF"

def get_port(vmname):
	vminfo = remote_cmd("VBoxManage showvminfo " + vmname)
	for line in vminfo.split("\n"):
		if "VRDE port:" in line:
			return re.sub(r'\D', "",line)
	return None

def manage_vm(screen, vmname):
	
	port = str(get_port(vmname))

	cmenu = Menu(screen, "Managing: " + vmname + " | RDP: " + port)

	cmenu.add_item(MenuItem((startvm_text, vmname), (startvm_rdp, vmname)))
	cmenu.add_item(MenuItem("Turn On / Off",   (power_menu,  screen,  vmname)))
	cmenu.add_item(MenuItem("Snapshot",        (eprint,      screen,  "FEATURE NOT YET IMPLEMENTED")))
	cmenu.add_item(MenuItem("Manage rdesktop", (eprint,      screen,  "FEATURE NOT YET IMPLEMENTED")))
	cmenu.add_item(MenuItem("VM information",  (eprint,      screen,  "FEATURE NOT YET IMPLEMENTED")))
	cmenu.add_item(MenuItem("Back",            cmenu.close))
	screen.clear()
	cmenu.draw(2, 4)

def startvm_text(vmname):
	
	port = str(get_port(vmname))

	if r_headless() == True:
		if port == "None":
			return "Start VM"
		else:
			return "RDP Port: " + port

	else:
		if port == "None":
			return "Start VM & RDesktop"
	
	return "Rdesktop"
	

def startvm_rdp(vmname):
	port = get_port(vmname)
	
	# Make sure it's off, to supress errors.
	if port == None:
		remote_cmd("VBoxManage startvm " + vmname + " --type headless& > /dev/null 2>&1")

	# Check for active X11 Environment
	if r_headless() == False:
		cmd = "rdesktop -K " + vcr_hostname + ":" + port + " > /dev/null 2>&1"
		process = subprocess.Popen(cmd, stdout=None, stderr=None, shell=True)
	

# Return True if vcr is being run remotely
def r_headless():
	return (os.environ.get('DISPLAY') == None)

def power_menu(screen, vmname):

	turnon   = "VBoxManage startvm "   + vmname + " --type headless& > /dev/null 2>&1"
	acpioff  = "VBoxManage controlvm " + vmname + " acpipowerbutton& > /dev/null 2>&1"
	forceoff = "VBoxManage controlvm " + vmname + " poweroff& > /dev/null 2>&1"
	reset    = "VBoxManage controlvm " + vmname + " reset& > /dev/null 2>&1"

	pmenu = Menu(screen, "Power Options for: " + vmname)
	pmenu.add_item(MenuItem("Turn On",          (remote_cmd, turnon)))
	pmenu.add_item(MenuItem("Turn Off (ACPI)",  (remote_cmd, acpioff)))
	pmenu.add_item(MenuItem("Turn Off (Force)", (remote_cmd, forceoff)))
	pmenu.add_item(MenuItem("Reset (Force)",    (remote_cmd, reset)))
	pmenu.add_item(MenuItem("Back",             pmenu.close))
	screen.clear()
	pmenu.draw(2, 4)

if __name__ == '__main__':
	curses.wrapper(main)
